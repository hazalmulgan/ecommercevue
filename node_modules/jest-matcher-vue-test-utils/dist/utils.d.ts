import Vue, { ComponentOptions, FunctionalComponentOptions } from "vue";
import { VueClass, NameSelector, ThisTypedShallowMountOptions, ShallowMountOptions } from "@vue/test-utils";
export declare type MatcherComponent<V extends Vue> = VueClass<V> | ComponentOptions<V> | FunctionalComponentOptions;
export declare type MatcherComponentOptions<V extends Vue> = ThisTypedShallowMountOptions<V> | ShallowMountOptions<Vue>;
export declare type WrapperFindArgument<V extends Vue> = string | NameSelector | FunctionalComponentOptions | VueClass<import("vue").default> | MatcherComponentOptions<V>;
export declare type MatcherResult = {
    message(): string;
    pass: boolean;
};
export declare const withMockWarning: (doesDuringMock: any) => void;
export declare const getWarningsByMount: <V extends Vue>(component: MatcherComponent<V>, propsData: any, dynamicMountOptions?: import("@vue/test-utils").MountOptions<Vue> | ThisTypedShallowMountOptions<V> | undefined) => any;
export declare const corkComponent: <V extends Vue>(component: MatcherComponent<V>) => ComponentOptions<V, import("vue/types/options").DefaultData<V>, import("vue/types/options").DefaultMethods<V>, import("vue/types/options").DefaultComputed, import("vue/types/options").PropsDefinition<Record<string, any>>, Record<string, any>>;
